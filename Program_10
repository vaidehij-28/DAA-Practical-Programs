Given an unsorted array of integers, design an algorithm and 
implement it using a program to sort an array of elements by dividing the 
array into two subarrays and combining these subarrays after sorting 
each one of them. Your program should also find number of comparisons 
and inversions during sorting the array.

#include <stdio.h>

int comparisons = 0;  // Track number of comparisons
int inversions = 0;   // Track number of inversions

// Merge function to merge two sorted subarrays and count comparisons and inversions
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int leftArr[n1], rightArr[n2];

    // Copy data into temp arrays
    for (int i = 0; i < n1; i++) {
        leftArr[i] = arr[left + i];
    }
    for (int j = 0; j < n2; j++) {
        rightArr[j] = arr[mid + 1 + j];
    }

    // Merge the temp arrays back into the original array
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        comparisons++;
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
            // Count inversions: all remaining elements in leftArr are greater
            inversions += (n1 - i);
        }
    }

    // Copy the remaining elements of leftArr[], if any
    while (i < n1) {
        arr[k++] = leftArr[i++];
    }

    // Copy the remaining elements of rightArr[], if any
    while (j < n2) {
        arr[k++] = rightArr[j++];
    }
}

// Merge Sort function to recursively divide and sort the array
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);  // Sort the first half
        mergeSort(arr, mid + 1, right);  // Sort the second half

        merge(arr, left, mid, right);  // Merge the sorted halves
    }
}

int main() {
    int n;

    // Input array size
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    // Input array elements
    printf("Enter %d integers:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Perform merge sort
    mergeSort(arr, 0, n - 1);

    // Output sorted array
    printf("Sorted array:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Output comparisons and inversions
    printf("Total comparisons: %d\n", comparisons);
    printf("Total inversions: %d\n", inversions);

    return 0;
}
