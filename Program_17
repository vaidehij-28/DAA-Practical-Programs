Given a graph, design an algorithm and implement it using a 
program to find if a graph is bipartite or not. (Hint: use BFS)

#include <stdio.h>
#include <stdbool.h>
#include <queue>

#define MAX_VERTICES 100

int main() {
    int V; // Number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    int adjMatrix[MAX_VERTICES][MAX_VERTICES];

    // Input the adjacency matrix
    printf("Enter the adjacency matrix (0 for no edge, 1 for edge):\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &adjMatrix[i][j]);
        }
    }

    int color[MAX_VERTICES];  // Array to store color of vertices
    for (int i = 0; i < V; i++) {
        color[i] = -1;  // No color assigned yet
    }

    bool isBipartite = true;  // To track if the graph is bipartite

    for (int start = 0; start < V; start++) {
        // If the vertex is already colored, no need to process it
        if (color[start] == -1) {
            // Start BFS from this vertex
            std::queue<int> q;
            color[start] = 0;  // Assign color 0 to the starting vertex
            q.push(start);

            while (!q.empty()) {
                int node = q.front();
                q.pop();

                // Check all the neighbors of the current node
                for (int i = 0; i < V; i++) {
                    // If there is an edge and the neighbor is uncolored
                    if (adjMatrix[node][i] == 1) {
                        if (color[i] == -1) {
                            // Assign the opposite color to the adjacent node
                            color[i] = 1 - color[node];
                            q.push(i);
                        } 
                        // If the adjacent node has the same color, it's not bipartite
                        else if (color[i] == color[node]) {
                            isBipartite = false;
                            break;
                        }
                    }
                }

                if (!isBipartite) {
                    break;
                }
            }
        }
        
        if (!isBipartite) {
            break;
        }
    }

    // Output the result
    if (isBipartite) {
        printf("Yes Bipartite\n");
    } else {
        printf("Not Bipartite\n");
    }

    return 0;
}
