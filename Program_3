Given an already sorted array of positive integers, design an 
algorithm and implement it using a program to find whether a given key 
element is present in the sorted array or not. For an array arr[n], search 
at the indexes arr[0], arr[2], arr[4],. ,arr[2k] and so on. Once the interval 
(arr[2k] < 
key < arr[ 2k+1] ) is found, perform a linear search operation from the 
index 2k to find the element key. (Complexity < O(n), where n is the 
number of elements need to be scanned for searching): Jump Search 


#include <stdio.h>

int jump_search(int arr[], int n, int key, int *comparisons) {
    int step = 2; // Jump size
    int prev = 0;

    // Jump phase
    while (prev < n && arr[prev] < key) {
        (*comparisons)++;
        prev += step;
    }

    // Adjust bounds for linear search
    int start = prev - step + 1;
    if (start < 0) start = 0;
    if (prev >= n) prev = n - 1;

    // Linear search in block
    for (int i = start; i <= prev; i++) {
        (*comparisons)++;
        if (arr[i] == key)
            return i;
    }

    return -1; // Key not found
}

int main() {
    int arr[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19}; // Sorted array
    int n = sizeof(arr) / sizeof(arr[0]);
    int key = 13;
    int comparisons = 0;

    int index = jump_search(arr, n, key, &comparisons);

    if (index != -1)
        printf("Key %d found at index %d.\n", key, index);
    else
        printf("Key %d not found in the array.\n", key);

    printf("Total comparisons made: %d\n", comparisons);

    return 0;
}
