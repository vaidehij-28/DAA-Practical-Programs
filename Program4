Given a sorted array of positive integers containing few duplicate 
elements, design an algorithm and implement it using a program to find 
whether the given key element is present in the array or not. If present, 
then also find the number of copies of given key. (Time Complexity = 
O(log n))


#include <stdio.h>

// Function to find the first occurrence of key
int find_first(int arr[], int n, int key, int *comparisons) {
    int low = 0, high = n - 1, result = -1;

    while (low <= high) {
        (*comparisons)++;
        int mid = (low + high) / 2;

        if (arr[mid] == key) {
            result = mid;
            high = mid - 1; // Look on left side
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return result;
}

// Function to find the last occurrence of key
int find_last(int arr[], int n, int key, int *comparisons) {
    int low = 0, high = n - 1, result = -1;

    while (low <= high) {
        (*comparisons)++;
        int mid = (low + high) / 2;

        if (arr[mid] == key) {
            result = mid;
            low = mid + 1; // Look on right side
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return result;
}

int main() {
    int arr[] = {1, 2, 2, 2, 3, 4, 5, 5, 6}; // Sorted array with duplicates
    int n = sizeof(arr) / sizeof(arr[0]);
    int key = 2;
    int comparisons = 0;

    int first = find_first(arr, n, key, &comparisons);
    int last = find_last(arr, n, key, &comparisons);

    if (first != -1 && last != -1) {
        int count = last - first + 1;
        printf("Key %d found.\n", key);
        printf("Number of copies: %d\n", count);
    } else {
        printf("Key %d not found in the array.\n", key);
    }

    printf("Total comparisons made: %d\n", comparisons);

    return 0;
}
