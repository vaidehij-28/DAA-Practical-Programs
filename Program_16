Given a (directed/undirected) graph, design an algorithm and 
implement it using a program to find if a path exists between two given 
vertices or not. (Hint: use DFS)
#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

int main() {
    int V; // Number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    int adjMatrix[MAX_VERTICES][MAX_VERTICES];

    // Input the adjacency matrix
    printf("Enter the adjacency matrix (0 or 1 for unweighted graph):\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &adjMatrix[i][j]);
        }
    }

    int source, destination;
    printf("Enter the source vertex: ");
    scanf("%d", &source);
    printf("Enter the destination vertex: ");
    scanf("%d", &destination);

    // Array to keep track of visited vertices
    int visited[MAX_VERTICES] = {0};

    // Stack for DFS (we can use an array as a stack)
    int stack[MAX_VERTICES];
    int top = -1; // Stack pointer

    // Push the source vertex onto the stack
    stack[++top] = source;
    visited[source] = 1; // Mark the source as visited

    bool pathFound = false;

    // DFS iteration
    while (top != -1) {
        int current = stack[top--]; // Pop an element from the stack

        // If we reached the destination, return true
        if (current == destination) {
            pathFound = true;
            break;
        }

        // Explore all neighbors of the current vertex
        for (int i = 0; i < V; i++) {
            if (adjMatrix[current][i] == 1 && !visited[i]) {
                stack[++top] = i;  // Push the neighbor onto the stack
                visited[i] = 1;     // Mark the neighbor as visited
            }
        }
    }

    // Output the result
    if (pathFound) {
        printf("Yes, there is a path from vertex %d to vertex %d.\n", source, destination);
    } else {
        printf("No, there is no path from vertex %d to vertex %d.\n", source, destination);
    }

    return 0;
}
